/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.events.RecordingAssetCreated', null, global);
goog.exportSymbol('proto.events.RecordingAudioFragmentCaptured', null, global);
goog.exportSymbol('proto.events.RecordingCognitionCompleted', null, global);
goog.exportSymbol('proto.events.RecordingCognitionCompleted.Payload', null, global);
goog.exportSymbol('proto.events.RecordingCompleted', null, global);
goog.exportSymbol('proto.events.RecordingCreated', null, global);
goog.exportSymbol('proto.events.RecordingDeleted', null, global);
goog.exportSymbol('proto.events.RecordingImageExtracted', null, global);
goog.exportSymbol('proto.events.RecordingInserted', null, global);
goog.exportSymbol('proto.events.RecordingVideoFragmentCaptured', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.RecordingImageExtracted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.RecordingImageExtracted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.events.RecordingImageExtracted.displayName = 'proto.events.RecordingImageExtracted';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.RecordingImageExtracted.prototype.toObject = function(opt_includeInstance) {
  return proto.events.RecordingImageExtracted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.RecordingImageExtracted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RecordingImageExtracted.toObject = function(includeInstance, msg) {
  var f, obj = {
    jobId: jspb.Message.getFieldWithDefault(msg, 10, ""),
    taskId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    sampleIndex: jspb.Message.getFieldWithDefault(msg, 12, 0),
    sampleRatePerSec: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    uri: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.RecordingImageExtracted}
 */
proto.events.RecordingImageExtracted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.RecordingImageExtracted;
  return proto.events.RecordingImageExtracted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.RecordingImageExtracted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.RecordingImageExtracted}
 */
proto.events.RecordingImageExtracted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobId(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSampleIndex(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSampleRatePerSec(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.RecordingImageExtracted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.RecordingImageExtracted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.RecordingImageExtracted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RecordingImageExtracted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJobId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTaskId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSampleIndex();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getSampleRatePerSec();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional string job_id = 10;
 * @return {string}
 */
proto.events.RecordingImageExtracted.prototype.getJobId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.events.RecordingImageExtracted.prototype.setJobId = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string task_id = 11;
 * @return {string}
 */
proto.events.RecordingImageExtracted.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.events.RecordingImageExtracted.prototype.setTaskId = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 sample_index = 12;
 * @return {number}
 */
proto.events.RecordingImageExtracted.prototype.getSampleIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.events.RecordingImageExtracted.prototype.setSampleIndex = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional double sample_rate_per_sec = 13;
 * @return {number}
 */
proto.events.RecordingImageExtracted.prototype.getSampleRatePerSec = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.events.RecordingImageExtracted.prototype.setSampleRatePerSec = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional string uri = 14;
 * @return {string}
 */
proto.events.RecordingImageExtracted.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.events.RecordingImageExtracted.prototype.setUri = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.RecordingVideoFragmentCaptured = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.RecordingVideoFragmentCaptured, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.events.RecordingVideoFragmentCaptured.displayName = 'proto.events.RecordingVideoFragmentCaptured';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.RecordingVideoFragmentCaptured.prototype.toObject = function(opt_includeInstance) {
  return proto.events.RecordingVideoFragmentCaptured.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.RecordingVideoFragmentCaptured} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RecordingVideoFragmentCaptured.toObject = function(includeInstance, msg) {
  var f, obj = {
    jobId: jspb.Message.getFieldWithDefault(msg, 10, ""),
    taskId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    sampleIndex: jspb.Message.getFieldWithDefault(msg, 12, 0),
    relativeStartTimeMs: jspb.Message.getFieldWithDefault(msg, 13, 0),
    relativeEndTimeMs: jspb.Message.getFieldWithDefault(msg, 14, 0),
    uri: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.RecordingVideoFragmentCaptured}
 */
proto.events.RecordingVideoFragmentCaptured.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.RecordingVideoFragmentCaptured;
  return proto.events.RecordingVideoFragmentCaptured.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.RecordingVideoFragmentCaptured} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.RecordingVideoFragmentCaptured}
 */
proto.events.RecordingVideoFragmentCaptured.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobId(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSampleIndex(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRelativeStartTimeMs(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRelativeEndTimeMs(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.RecordingVideoFragmentCaptured.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.RecordingVideoFragmentCaptured.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.RecordingVideoFragmentCaptured} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RecordingVideoFragmentCaptured.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJobId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTaskId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSampleIndex();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getRelativeStartTimeMs();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getRelativeEndTimeMs();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional string job_id = 10;
 * @return {string}
 */
proto.events.RecordingVideoFragmentCaptured.prototype.getJobId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.events.RecordingVideoFragmentCaptured.prototype.setJobId = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string task_id = 11;
 * @return {string}
 */
proto.events.RecordingVideoFragmentCaptured.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.events.RecordingVideoFragmentCaptured.prototype.setTaskId = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 sample_index = 12;
 * @return {number}
 */
proto.events.RecordingVideoFragmentCaptured.prototype.getSampleIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.events.RecordingVideoFragmentCaptured.prototype.setSampleIndex = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 relative_start_time_ms = 13;
 * @return {number}
 */
proto.events.RecordingVideoFragmentCaptured.prototype.getRelativeStartTimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.events.RecordingVideoFragmentCaptured.prototype.setRelativeStartTimeMs = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 relative_end_time_ms = 14;
 * @return {number}
 */
proto.events.RecordingVideoFragmentCaptured.prototype.getRelativeEndTimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.events.RecordingVideoFragmentCaptured.prototype.setRelativeEndTimeMs = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional string uri = 15;
 * @return {string}
 */
proto.events.RecordingVideoFragmentCaptured.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.events.RecordingVideoFragmentCaptured.prototype.setUri = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.RecordingAudioFragmentCaptured = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.RecordingAudioFragmentCaptured, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.events.RecordingAudioFragmentCaptured.displayName = 'proto.events.RecordingAudioFragmentCaptured';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.RecordingAudioFragmentCaptured.prototype.toObject = function(opt_includeInstance) {
  return proto.events.RecordingAudioFragmentCaptured.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.RecordingAudioFragmentCaptured} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RecordingAudioFragmentCaptured.toObject = function(includeInstance, msg) {
  var f, obj = {
    jobId: jspb.Message.getFieldWithDefault(msg, 10, ""),
    taskId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    sampleIndex: jspb.Message.getFieldWithDefault(msg, 12, 0),
    relativeStartTimeMs: jspb.Message.getFieldWithDefault(msg, 13, 0),
    relativeEndTimeMs: jspb.Message.getFieldWithDefault(msg, 14, 0),
    uri: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.RecordingAudioFragmentCaptured}
 */
proto.events.RecordingAudioFragmentCaptured.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.RecordingAudioFragmentCaptured;
  return proto.events.RecordingAudioFragmentCaptured.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.RecordingAudioFragmentCaptured} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.RecordingAudioFragmentCaptured}
 */
proto.events.RecordingAudioFragmentCaptured.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobId(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSampleIndex(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRelativeStartTimeMs(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRelativeEndTimeMs(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.RecordingAudioFragmentCaptured.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.RecordingAudioFragmentCaptured.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.RecordingAudioFragmentCaptured} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RecordingAudioFragmentCaptured.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJobId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTaskId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSampleIndex();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getRelativeStartTimeMs();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getRelativeEndTimeMs();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional string job_id = 10;
 * @return {string}
 */
proto.events.RecordingAudioFragmentCaptured.prototype.getJobId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.events.RecordingAudioFragmentCaptured.prototype.setJobId = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string task_id = 11;
 * @return {string}
 */
proto.events.RecordingAudioFragmentCaptured.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.events.RecordingAudioFragmentCaptured.prototype.setTaskId = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 sample_index = 12;
 * @return {number}
 */
proto.events.RecordingAudioFragmentCaptured.prototype.getSampleIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.events.RecordingAudioFragmentCaptured.prototype.setSampleIndex = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 relative_start_time_ms = 13;
 * @return {number}
 */
proto.events.RecordingAudioFragmentCaptured.prototype.getRelativeStartTimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.events.RecordingAudioFragmentCaptured.prototype.setRelativeStartTimeMs = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 relative_end_time_ms = 14;
 * @return {number}
 */
proto.events.RecordingAudioFragmentCaptured.prototype.getRelativeEndTimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.events.RecordingAudioFragmentCaptured.prototype.setRelativeEndTimeMs = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional string uri = 15;
 * @return {string}
 */
proto.events.RecordingAudioFragmentCaptured.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.events.RecordingAudioFragmentCaptured.prototype.setUri = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.RecordingCompleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.RecordingCompleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.events.RecordingCompleted.displayName = 'proto.events.RecordingCompleted';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.RecordingCompleted.prototype.toObject = function(opt_includeInstance) {
  return proto.events.RecordingCompleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.RecordingCompleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RecordingCompleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    jobId: jspb.Message.getFieldWithDefault(msg, 10, ""),
    taskId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    recordingId: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.RecordingCompleted}
 */
proto.events.RecordingCompleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.RecordingCompleted;
  return proto.events.RecordingCompleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.RecordingCompleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.RecordingCompleted}
 */
proto.events.RecordingCompleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobId(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordingId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.RecordingCompleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.RecordingCompleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.RecordingCompleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RecordingCompleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJobId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTaskId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getRecordingId();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string job_id = 10;
 * @return {string}
 */
proto.events.RecordingCompleted.prototype.getJobId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.events.RecordingCompleted.prototype.setJobId = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string task_id = 11;
 * @return {string}
 */
proto.events.RecordingCompleted.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.events.RecordingCompleted.prototype.setTaskId = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string recording_id = 12;
 * @return {string}
 */
proto.events.RecordingCompleted.prototype.getRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.events.RecordingCompleted.prototype.setRecordingId = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.RecordingAssetCreated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.RecordingAssetCreated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.events.RecordingAssetCreated.displayName = 'proto.events.RecordingAssetCreated';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.RecordingAssetCreated.prototype.toObject = function(opt_includeInstance) {
  return proto.events.RecordingAssetCreated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.RecordingAssetCreated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RecordingAssetCreated.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: jspb.Message.getFieldWithDefault(msg, 10, ""),
    taskId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    recordingId: jspb.Message.getFieldWithDefault(msg, 12, ""),
    assetType: jspb.Message.getFieldWithDefault(msg, 13, ""),
    uri: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.RecordingAssetCreated}
 */
proto.events.RecordingAssetCreated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.RecordingAssetCreated;
  return proto.events.RecordingAssetCreated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.RecordingAssetCreated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.RecordingAssetCreated}
 */
proto.events.RecordingAssetCreated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetId(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordingId(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetType(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.RecordingAssetCreated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.RecordingAssetCreated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.RecordingAssetCreated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RecordingAssetCreated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTaskId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getRecordingId();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getAssetType();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional string asset_id = 10;
 * @return {string}
 */
proto.events.RecordingAssetCreated.prototype.getAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.events.RecordingAssetCreated.prototype.setAssetId = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string task_id = 11;
 * @return {string}
 */
proto.events.RecordingAssetCreated.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.events.RecordingAssetCreated.prototype.setTaskId = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string recording_id = 12;
 * @return {string}
 */
proto.events.RecordingAssetCreated.prototype.getRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.events.RecordingAssetCreated.prototype.setRecordingId = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string asset_type = 13;
 * @return {string}
 */
proto.events.RecordingAssetCreated.prototype.getAssetType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.events.RecordingAssetCreated.prototype.setAssetType = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string uri = 14;
 * @return {string}
 */
proto.events.RecordingAssetCreated.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.events.RecordingAssetCreated.prototype.setUri = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.RecordingCreated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.RecordingCreated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.events.RecordingCreated.displayName = 'proto.events.RecordingCreated';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.RecordingCreated.prototype.toObject = function(opt_includeInstance) {
  return proto.events.RecordingCreated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.RecordingCreated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RecordingCreated.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordingId: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.RecordingCreated}
 */
proto.events.RecordingCreated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.RecordingCreated;
  return proto.events.RecordingCreated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.RecordingCreated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.RecordingCreated}
 */
proto.events.RecordingCreated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordingId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.RecordingCreated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.RecordingCreated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.RecordingCreated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RecordingCreated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordingId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string recording_id = 10;
 * @return {string}
 */
proto.events.RecordingCreated.prototype.getRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.events.RecordingCreated.prototype.setRecordingId = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.RecordingInserted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.RecordingInserted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.events.RecordingInserted.displayName = 'proto.events.RecordingInserted';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.RecordingInserted.prototype.toObject = function(opt_includeInstance) {
  return proto.events.RecordingInserted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.RecordingInserted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RecordingInserted.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordingId: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.RecordingInserted}
 */
proto.events.RecordingInserted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.RecordingInserted;
  return proto.events.RecordingInserted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.RecordingInserted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.RecordingInserted}
 */
proto.events.RecordingInserted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordingId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.RecordingInserted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.RecordingInserted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.RecordingInserted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RecordingInserted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordingId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string recording_id = 10;
 * @return {string}
 */
proto.events.RecordingInserted.prototype.getRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.events.RecordingInserted.prototype.setRecordingId = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.RecordingDeleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.RecordingDeleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.events.RecordingDeleted.displayName = 'proto.events.RecordingDeleted';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.RecordingDeleted.prototype.toObject = function(opt_includeInstance) {
  return proto.events.RecordingDeleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.RecordingDeleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RecordingDeleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordingId: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.RecordingDeleted}
 */
proto.events.RecordingDeleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.RecordingDeleted;
  return proto.events.RecordingDeleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.RecordingDeleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.RecordingDeleted}
 */
proto.events.RecordingDeleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordingId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.RecordingDeleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.RecordingDeleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.RecordingDeleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RecordingDeleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordingId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string recording_id = 10;
 * @return {string}
 */
proto.events.RecordingDeleted.prototype.getRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.events.RecordingDeleted.prototype.setRecordingId = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.RecordingCognitionCompleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.RecordingCognitionCompleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.events.RecordingCognitionCompleted.displayName = 'proto.events.RecordingCognitionCompleted';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.RecordingCognitionCompleted.prototype.toObject = function(opt_includeInstance) {
  return proto.events.RecordingCognitionCompleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.RecordingCognitionCompleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RecordingCognitionCompleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordingId: jspb.Message.getFieldWithDefault(msg, 10, ""),
    payload: (f = msg.getPayload()) && proto.events.RecordingCognitionCompleted.Payload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.RecordingCognitionCompleted}
 */
proto.events.RecordingCognitionCompleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.RecordingCognitionCompleted;
  return proto.events.RecordingCognitionCompleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.RecordingCognitionCompleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.RecordingCognitionCompleted}
 */
proto.events.RecordingCognitionCompleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordingId(value);
      break;
    case 11:
      var value = new proto.events.RecordingCognitionCompleted.Payload;
      reader.readMessage(value,proto.events.RecordingCognitionCompleted.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.RecordingCognitionCompleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.RecordingCognitionCompleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.RecordingCognitionCompleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RecordingCognitionCompleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordingId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.events.RecordingCognitionCompleted.Payload.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.RecordingCognitionCompleted.Payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.RecordingCognitionCompleted.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.events.RecordingCognitionCompleted.Payload.displayName = 'proto.events.RecordingCognitionCompleted.Payload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.RecordingCognitionCompleted.Payload.prototype.toObject = function(opt_includeInstance) {
  return proto.events.RecordingCognitionCompleted.Payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.RecordingCognitionCompleted.Payload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RecordingCognitionCompleted.Payload.toObject = function(includeInstance, msg) {
  var f, obj = {
    jobId: jspb.Message.getFieldWithDefault(msg, 10, ""),
    taskId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    applicationId: jspb.Message.getFieldWithDefault(msg, 12, ""),
    organizationId: jspb.Message.getFieldWithDefault(msg, 13, 0),
    libraryId: jspb.Message.getFieldWithDefault(msg, 14, ""),
    indexOverride: jspb.Message.getFieldWithDefault(msg, 15, ""),
    token: jspb.Message.getFieldWithDefault(msg, 16, ""),
    assetId: jspb.Message.getFieldWithDefault(msg, 17, ""),
    skipMentionGeneration: jspb.Message.getFieldWithDefault(msg, 18, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.RecordingCognitionCompleted.Payload}
 */
proto.events.RecordingCognitionCompleted.Payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.RecordingCognitionCompleted.Payload;
  return proto.events.RecordingCognitionCompleted.Payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.RecordingCognitionCompleted.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.RecordingCognitionCompleted.Payload}
 */
proto.events.RecordingCognitionCompleted.Payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobId(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setApplicationId(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOrganizationId(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setLibraryId(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setIndexOverride(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetId(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkipMentionGeneration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.RecordingCognitionCompleted.Payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.RecordingCognitionCompleted.Payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.RecordingCognitionCompleted.Payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RecordingCognitionCompleted.Payload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJobId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTaskId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getApplicationId();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getOrganizationId();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getLibraryId();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getIndexOverride();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getAssetId();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getSkipMentionGeneration();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
};


/**
 * optional string job_id = 10;
 * @return {string}
 */
proto.events.RecordingCognitionCompleted.Payload.prototype.getJobId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.events.RecordingCognitionCompleted.Payload.prototype.setJobId = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string task_id = 11;
 * @return {string}
 */
proto.events.RecordingCognitionCompleted.Payload.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.events.RecordingCognitionCompleted.Payload.prototype.setTaskId = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string application_id = 12;
 * @return {string}
 */
proto.events.RecordingCognitionCompleted.Payload.prototype.getApplicationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.events.RecordingCognitionCompleted.Payload.prototype.setApplicationId = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional int64 organization_id = 13;
 * @return {number}
 */
proto.events.RecordingCognitionCompleted.Payload.prototype.getOrganizationId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.events.RecordingCognitionCompleted.Payload.prototype.setOrganizationId = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional string library_id = 14;
 * @return {string}
 */
proto.events.RecordingCognitionCompleted.Payload.prototype.getLibraryId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.events.RecordingCognitionCompleted.Payload.prototype.setLibraryId = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string index_override = 15;
 * @return {string}
 */
proto.events.RecordingCognitionCompleted.Payload.prototype.getIndexOverride = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.events.RecordingCognitionCompleted.Payload.prototype.setIndexOverride = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string token = 16;
 * @return {string}
 */
proto.events.RecordingCognitionCompleted.Payload.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.events.RecordingCognitionCompleted.Payload.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string asset_id = 17;
 * @return {string}
 */
proto.events.RecordingCognitionCompleted.Payload.prototype.getAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.events.RecordingCognitionCompleted.Payload.prototype.setAssetId = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional bool skip_mention_generation = 18;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.events.RecordingCognitionCompleted.Payload.prototype.getSkipMentionGeneration = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 18, false));
};


/** @param {boolean} value */
proto.events.RecordingCognitionCompleted.Payload.prototype.setSkipMentionGeneration = function(value) {
  jspb.Message.setProto3BooleanField(this, 18, value);
};


/**
 * optional string recording_id = 10;
 * @return {string}
 */
proto.events.RecordingCognitionCompleted.prototype.getRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.events.RecordingCognitionCompleted.prototype.setRecordingId = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional Payload payload = 11;
 * @return {?proto.events.RecordingCognitionCompleted.Payload}
 */
proto.events.RecordingCognitionCompleted.prototype.getPayload = function() {
  return /** @type{?proto.events.RecordingCognitionCompleted.Payload} */ (
    jspb.Message.getWrapperField(this, proto.events.RecordingCognitionCompleted.Payload, 11));
};


/** @param {?proto.events.RecordingCognitionCompleted.Payload|undefined} value */
proto.events.RecordingCognitionCompleted.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.events.RecordingCognitionCompleted.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.events.RecordingCognitionCompleted.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 11) != null;
};


goog.object.extend(exports, proto.events);
