/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.exportSymbol('proto.events.BasicEmail', null, global);
goog.exportSymbol('proto.events.SMSNotification', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.BasicEmail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.BasicEmail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.events.BasicEmail.displayName = 'proto.events.BasicEmail';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.BasicEmail.prototype.toObject = function(opt_includeInstance) {
  return proto.events.BasicEmail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.BasicEmail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.BasicEmail.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromAddress: jspb.Message.getFieldWithDefault(msg, 10, ""),
    toAddress: jspb.Message.getFieldWithDefault(msg, 11, ""),
    subject: jspb.Message.getFieldWithDefault(msg, 12, ""),
    body: jspb.Message.getFieldWithDefault(msg, 13, ""),
    replyTo: jspb.Message.getFieldWithDefault(msg, 14, ""),
    bodyHtml: jspb.Message.getFieldWithDefault(msg, 15, ""),
    ccAddress: jspb.Message.getFieldWithDefault(msg, 16, ""),
    bccAddress: jspb.Message.getFieldWithDefault(msg, 17, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.BasicEmail}
 */
proto.events.BasicEmail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.BasicEmail;
  return proto.events.BasicEmail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.BasicEmail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.BasicEmail}
 */
proto.events.BasicEmail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromAddress(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setToAddress(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplyTo(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setBodyHtml(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setCcAddress(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setBccAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.BasicEmail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.BasicEmail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.BasicEmail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.BasicEmail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromAddress();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getToAddress();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getReplyTo();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getBodyHtml();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getCcAddress();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getBccAddress();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
};


/**
 * optional string from_address = 10;
 * @return {string}
 */
proto.events.BasicEmail.prototype.getFromAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.events.BasicEmail.prototype.setFromAddress = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string to_address = 11;
 * @return {string}
 */
proto.events.BasicEmail.prototype.getToAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.events.BasicEmail.prototype.setToAddress = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string subject = 12;
 * @return {string}
 */
proto.events.BasicEmail.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.events.BasicEmail.prototype.setSubject = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string body = 13;
 * @return {string}
 */
proto.events.BasicEmail.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.events.BasicEmail.prototype.setBody = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string reply_to = 14;
 * @return {string}
 */
proto.events.BasicEmail.prototype.getReplyTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.events.BasicEmail.prototype.setReplyTo = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string body_html = 15;
 * @return {string}
 */
proto.events.BasicEmail.prototype.getBodyHtml = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.events.BasicEmail.prototype.setBodyHtml = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string cc_address = 16;
 * @return {string}
 */
proto.events.BasicEmail.prototype.getCcAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.events.BasicEmail.prototype.setCcAddress = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string bcc_address = 17;
 * @return {string}
 */
proto.events.BasicEmail.prototype.getBccAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.events.BasicEmail.prototype.setBccAddress = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.SMSNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.SMSNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.events.SMSNotification.displayName = 'proto.events.SMSNotification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.SMSNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.events.SMSNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.SMSNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.SMSNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromNumber: jspb.Message.getFieldWithDefault(msg, 10, ""),
    toNumber: jspb.Message.getFieldWithDefault(msg, 11, ""),
    message: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.SMSNotification}
 */
proto.events.SMSNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.SMSNotification;
  return proto.events.SMSNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.SMSNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.SMSNotification}
 */
proto.events.SMSNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromNumber(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setToNumber(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.SMSNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.SMSNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.SMSNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.SMSNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromNumber();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getToNumber();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string from_number = 10;
 * @return {string}
 */
proto.events.SMSNotification.prototype.getFromNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.events.SMSNotification.prototype.setFromNumber = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string to_number = 11;
 * @return {string}
 */
proto.events.SMSNotification.prototype.getToNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.events.SMSNotification.prototype.setToNumber = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string message = 12;
 * @return {string}
 */
proto.events.SMSNotification.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.events.SMSNotification.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


goog.object.extend(exports, proto.events);
